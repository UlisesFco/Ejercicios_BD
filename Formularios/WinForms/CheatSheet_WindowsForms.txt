//Win Forms

//Conexión a BD

//Oracle
GestorBD = New GestorBD.GestorBD("MSDAORA", "Usuario_BD",
	"Password_BD", "oracle")
//SQL Server
GestorBD = New GestorBD.GestorBD("SQLNCLI11","localhost",
	"Usuario_BD", "Password_BD", "NombreBD") //sa -> sqladmin
GestorBD = New GestorBD.GestorBD("Microsoft.ACE.OLEDB.12.0",
    "Admin", "", "Ruta_completa_de_la_BD")

//Consulta de MS Access																					//Fecha entre # para Access
CadSql = string.Format("UPDATE Pedido INNER JOIN PedidoLibro ON Pedido.IdPed = PedidoLibro.IdPed SET PedidoLibro.FechaEnt = #{0}#" +
                        " WHERE(((PedidoLibro.IdPed) = {1}) AND((PedidoLibro.IdLib) = {2}))",
                        fecha.Day.ToString() + "/" + fecha.Month.ToString() + "/" + fecha.Year.ToString(), idPed, idLib);

//Cadena de conexión para Access
GestorBD = new GestorBD.GestorBD("Microsoft.ACE.OLEDB.12.0", "Admin", "",
                    "C:/BD/2oParcial/BD2oPedLibros.accdb");

//1- Acceso a la BD.
GestorBD = new GestorBD.GestorBD("MSDAORA", "bdalumno", "estudia", "oracle");
// Llenar DataGrid
cadSql = "select * from Alum";
GestorBD.consBD(cadSql, dsAlum, "Alumnos");
dtgGeneral.DataSource = dsAlum.Tables["Alumnos"];
comunes.cargaCombo(cboAlumnos, dsAlum, "Alumnos", "NomAl");

//Llenar combo box
cadSql = "select * from Mater";
GestorBD.consBD(cadSql, dsMater, "Materias");
//dtgGeneral.DataSource = dsMater.Tables["Materias"];
comunes.cargaCombo(cboMaterias, dsMater, "Materias", "NomMat");

//Visibilidad y activación
elem.Visible =true o false;
elem.enabled=true o false;

//Para obtener el valor de la celda seleccionada al darle clic en el DataGrid
//existen tres maneras (necesariamente hay que dar clic en la celda elegida):
//1) 
nombreDataGrid.CurrentCell.Value;
//2) 
nombreDataGrid[ÍndiceColumna, ÍndiceFila].Value;
//3) 
nombreDataGrid[NombreColumna, ÍndiceFila].Value;

//Obtener datos de data Grid
int fila, col; Object valor;
//Obtiene fila, columna y valor de la celda elegida.
fila = dtgGeneral.CurrentCell.RowIndex; col = dtgGeneral.CurrentCell.ColumnIndex;
valor = dtgGeneral.CurrentCell.Value;
MessageBox.Show("Fila: " + fila + " Columna: " + col + " Valor: " + valor);

//Obtiene sólo el valor.
MessageBox.Show("Valor: " + dtgGeneral[col, fila].Value.ToString());

//MessageBox con botones Sí/No

 int folio; String cadSql;
 DialogResult botón;

 //Toma el folio de la calificación seleccionada en el data grid.
 folio = Convert.ToInt16(dtgGeneral["Folio", dtgGeneral.CurrentRow.Index].Value);
 botón = MessageBox.Show("¿Se elimina el registro con folio= " + folio.ToString(),
        "Eliminación", MessageBoxButtons.YesNo);

//Si se selecciona el botón Yes, del MessageBox, elimina el registro asociado.
if (botón == DialogResult.Yes) {
//Construye la cadena de eliminación y la envía para su ejecución.
    cadSql = "delete from Historial where Folio = " + folio;
    if (GestorBD.bajaBD(cadSql) == OK)
        MessageBox.Show("Se eliminó la calificación del folio " + folio + " exitosamente");
    else
        MessageBox.Show("No se pudo eliminar la calificación");

//Ejecutar Procedimiento
 //================================================
    //Código del procedimiento.

    //Variable para conectarse a Oracle.
    OleDbConnection cnOracle;

    //Ejemplo de ejecución de un procedimiento almacenado (en Oracle).
    //Procedimiento matCantAls2 (ejemplo 3 de las notas asociadas en C2SQL.pdf):
    //dado el nombre de una materia como parámetro, regresa cuántos alumnos
    //la están llevando, por medio de otro parámetro.
    private void button1_Click(object sender, EventArgs e) {
      String nomMat; int cant;
      OleDbCommand procAlm;
      OleDbParameter par;

      //1- Abrir la conexión a la BD.
      cnOracle = new OleDbConnection("Provider=MSDAORA; Data Source=oracle;" +
        "User ID=bdalumno;Password=estudia");
      cnOracle.Open();
      procAlm = new OleDbCommand();
      procAlm.Connection = cnOracle;

      //2- Especificar el llamado al procedimiento  (en general: al subprograma).
      procAlm.CommandText = "MatCantAls2";
      procAlm.CommandType = CommandType.StoredProcedure;

      //3- Especificar los parámetros:
      //a) primero todos los de entrada:
      nomMat = "Matemáticas I";
      par = new OleDbParameter("nom", nomMat);
      procAlm.Parameters.Add(par);

      //b) luego todos los de salida (uno en este caso):
      par = new OleDbParameter("cant", OleDbType.Integer, 4, 
        ParameterDirection.Output, false,4, 0, "NomMat", DataRowVersion.Current, 0);
      procAlm.Parameters.Add(par);

      //4- Ejecutar el procedimiento (en general: el subprograma).
      try {
        procAlm.ExecuteNonQuery();

        //5- Recuperar el (los) valor(es) regresado(s) por medio del (de los)
        //   parámetro(s) de salida.
        cant = Convert.ToInt16(procAlm.Parameters["cant"].Value);
        MessageBox.Show("Cant. de alumn@s: " + cant);
      }
      catch (OleDbException err) {
        MessageBox.Show(err.Message);
      }

      //6- Cerrar la conexión a la BD.
      cnOracle.Close();
    }
    //Ejecutar función
    //===========================
    //Código de la función.

    //Ejemplo de ejecución de una función almacenada (en Oracle).
    //Función cantMatersAlum:
    //dado un alumno como parámetro, cuenta la cantidad de materias que lleva.
    private void button2_Click(object sender, EventArgs e) {
      String nomAlum; int cantMaters;
      OleDbCommand procAlm;
      OleDbParameter par;

      //1- Abrir la conexión a la BD.
      cnOracle = new OleDbConnection("Provider=MSDAORA; Data Source=oracle;" +
        "User ID=bdalumno;Password=estudia");
      cnOracle.Open();
      procAlm = new OleDbCommand();
      procAlm.Connection = cnOracle;

      //2- Especificar el llamado a la función.
      procAlm.CommandText = "cantMatersAlum";
      procAlm.CommandType = CommandType.StoredProcedure;

      //3- Especificar los parámetros:
      // a) Nota: primero hay que definir el tipo de valor que regresará la función.
      par = new OleDbParameter("RETURN_VALUE", OleDbType.Integer,
        4, ParameterDirection.ReturnValue, false, 4, 0, "NomAl", DataRowVersion.Current, 0);
      procAlm.Parameters.Add(par);

      // b) luego hay que definir los parámetros de entrada (uno en este caso).
      nomAlum = "Rebeca";
      par = new OleDbParameter("nombre", nomAlum);
      procAlm.Parameters.Add(par);

      //4- Ejecutar el procedimiento (en general: el subprograma).
      try {
        procAlm.ExecuteNonQuery();

        //5- Recuperar el valor regresado por la función.
        cantMaters = Convert.ToInt16(procAlm.Parameters["RETURN_VALUE"].Value);
        MessageBox.Show("Cantidad de materias del alumn@ " + nomAlum + ": " + cantMaters);
      }
      catch (OleDbException err) {
        MessageBox.Show(err.Message);
      }

      //6- Cerrar la conexión a la BD.
      cnOracle.Close();
    }